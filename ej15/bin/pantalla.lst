     1                                  
     2                                  GLOBAL MOSTRAR_PANTALLA
     3                                  EXTERN _NUMERO_TOTAL
     4                                  EXTERN _BUFFER_NUMERO_PANTALLA
     5                                  EXTERN __DIR_LINEAL_VIDEO
     6                                  
     7                                  
     8                                  section .rutinas
     9                                  USE32
    10                                  
    11                                  ;%define FILAS         0x50
    12                                  ;%define COLUMNAS      0x500
    13                                  
    14                                  %define ASCII_TECLA_A 0x41
    15                                  %define ASCII_TECLA_B 0x42
    16                                  %define ASCII_TECLA_C 0x43
    17                                  %define ASCII_TECLA_D 0x44
    18                                  %define ASCII_TECLA_E 0x45
    19                                  %define ASCII_TECLA_F 0x46
    20                                  %define ASCII_TECLA_0 0x30
    21                                  %define ASCII_TECLA_1 0x31
    22                                  %define ASCII_TECLA_2 0x32
    23                                  %define ASCII_TECLA_3 0x33
    24                                  %define ASCII_TECLA_4 0x34
    25                                  %define ASCII_TECLA_5 0x35
    26                                  %define ASCII_TECLA_6 0x36
    27                                  %define ASCII_TECLA_7 0x37
    28                                  %define ASCII_TECLA_8 0x38
    29                                  %define ASCII_TECLA_9 0x39
    30                                  %define ASCII_TECLA_x 0x78
    31                                  
    32                                  
    33                                  
    34                                      MOSTRAR_PANTALLA:
    35                                  
    36 00000000 B900000000                    mov ecx, 0x0 
    37 00000005 BA00000000                    mov edx, 0x0
    38 0000000A BB00000000                    mov ebx, 0x0
    39                                  
    40                                  
    41 0000000F 89E5                          mov ebp, esp  
    42                                  
    43                                        PARTE_ALTA:
    44                                  
    45 00000011 8B4504                        mov eax,[ebp + 4]      ; Cargo direccion de __NUMERO_TOTAL
    46 00000014 8B4004                        mov eax, [eax + 0x4]   ; Cargo los 8 digitos mas significativos [_NUMERO_TOTAL + 0x4]   
    47 00000017 EB09                          jmp BUFFER
    48                                  
    49                                        PARTE_BAJA:
    50 00000019 8B4504                        mov eax,[ebp + 4]      ; Cargo direccion de __NUMERO_TOTAL
    51 0000001C 8B00                          mov eax, [eax]         ; Cargo los 8 digitos menos significativos [_NUMERO_TOTAL] 
    52 0000001E 66BA0100                      mov dx, 0x01           ; Flag para contar las primeras 8 teclas
    53                                  
    54                                  
    55                                        BUFFER:
    56 00000022 C1C004                        rol eax,0x4                     ; Voy desplazando el hexa mas significativo ciclo a ciclo
    57 00000025 B30F                          mov bl,0xF                     
    58 00000027 21C3                          and ebx,eax                     ; Me quedo solo con el hexa que desplaze en bl, sin alterar eax
    59                                  
    60                                        L_0:
    61 00000029 80FB00                          cmp bl, 0x0           ; Comparo el hexa de la tecla con su valor
    62 0000002C B730                            mov bh, ASCII_TECLA_0 ; Cargo valor ascii de la tecla 
    63 0000002E 746A                            jz GUARDADO_LETRA
    64                                  
    65                                        L_1:      
    66 00000030 80FB01                          cmp bl, 0x1           ; Comparo el hexa de la tecla con su valor
    67 00000033 B731                            mov bh, ASCII_TECLA_1 ; Cargo valor ascii de la tecla 
    68 00000035 7463                            jz GUARDADO_LETRA
    69                                  
    70                                        L_2:
    71 00000037 80FB02                          cmp bl, 0x2           ; Comparo el hexa de la tecla con su valor  
    72 0000003A B732                            mov bh, ASCII_TECLA_2 ; Cargo valor ascii de la tecla 
    73 0000003C 745C                            jz GUARDADO_LETRA
    74                                  
    75                                        L_3:
    76 0000003E 80FB03                          cmp bl, 0x3           ; Comparo el hexa de la tecla con su valor  
    77 00000041 B733                            mov bh, ASCII_TECLA_3 ; Cargo valor ascii de la tecla 
    78 00000043 7455                            jz GUARDADO_LETRA   
    79                                  
    80                                        L_4:
    81 00000045 80FB04                          cmp bl, 0x4           ; Comparo el hexa de la tecla con su valor
    82 00000048 B734                            mov bh, ASCII_TECLA_4 ; Cargo valor ascii de la tecla 
    83 0000004A 744E                            jz GUARDADO_LETRA 
    84                                  
    85                                        L_5:
    86 0000004C 80FB05                          cmp bl, 0x5           ; Comparo el hexa de la tecla con su valor  
    87 0000004F B735                            mov bh, ASCII_TECLA_5 ; Cargo valor ascii de la tecla 
    88 00000051 7447                            jz GUARDADO_LETRA   
    89                                  
    90                                        L_6:
    91 00000053 80FB06                          cmp bl, 0x6           ; Comparo el hexa de la tecla con su valor
    92 00000056 B736                            mov bh, ASCII_TECLA_6 ; Cargo valor ascii de la tecla  
    93 00000058 7440                            jz GUARDADO_LETRA   
    94                                  
    95                                        L_7:
    96 0000005A 80FB07                          cmp bl, 0x7           ; Comparo el hexa de la tecla con su valor  
    97 0000005D B737                            mov bh, ASCII_TECLA_7 ; Cargo valor ascii de la tecla 
    98 0000005F 7439                            jz GUARDADO_LETRA     
    99                                        
   100                                        L_8:
   101 00000061 80FB08                          cmp bl, 0x8           ; Comparo el hexa de la tecla con su valor
   102 00000064 B738                            mov bh, ASCII_TECLA_8 ; Cargo valor ascii de la tecla 
   103 00000066 7432                            jz GUARDADO_LETRA
   104                                        
   105                                        L_9:
   106 00000068 80FB09                          cmp bl, 0x9           ; Comparo el hexa de la tecla con su valor 
   107 0000006B B739                            mov bh, ASCII_TECLA_9 ; Cargo valor ascii de la tecla 
   108 0000006D 742B                            jz GUARDADO_LETRA  
   109                                        
   110                                        L_A:
   111 0000006F 80FB0A                          cmp bl, 0xA           ; Comparo el hexa de la tecla con su valor
   112 00000072 B741                            mov bh, ASCII_TECLA_A ; Cargo valor ascii de la tecla 
   113 00000074 7424                            jz GUARDADO_LETRA
   114                                        
   115                                        L_B:
   116 00000076 80FB0B                          cmp bl, 0xB           ; Comparo el hexa de la tecla con su valor 
   117 00000079 B742                            mov bh, ASCII_TECLA_B ; Cargo valor ascii de la tecla 
   118 0000007B 741D                            jz GUARDADO_LETRA  
   119                                        
   120                                        L_C:
   121 0000007D 80FB0C                          cmp bl, 0xC           ; Comparo el hexa de la tecla con su valor  
   122 00000080 B743                            mov bh, ASCII_TECLA_C ; Cargo valor ascii de la tecla 
   123 00000082 7416                            jz GUARDADO_LETRA 
   124                                        
   125                                        L_D:
   126 00000084 80FB0D                          cmp bl, 0xD           ; Comparo el hexa de la tecla con su valor
   127 00000087 B744                            mov bh, ASCII_TECLA_D ; Cargo valor ascii de la tecla 
   128 00000089 740F                            jz GUARDADO_LETRA 
   129                                        
   130                                        L_E:
   131 0000008B 80FB0E                          cmp bl, 0xE           ; Comparo el hexa de la tecla con su valor 
   132 0000008E B745                            mov bh, ASCII_TECLA_E ; Cargo valor ascii de la tecla 
   133 00000090 7408                            jz GUARDADO_LETRA  
   134                                  
   135                                        L_F:
   136 00000092 80FB0F                          cmp bl, 0xF           ; Comparo el hexa de la tecla con su valor 
   137 00000095 B746                            mov bh, ASCII_TECLA_F ; Cargo valor ascii de la tecla 
   138 00000097 7401                            jz GUARDADO_LETRA 
   139                                  
   140 00000099 C3                            ret
   141                                  
   142                                   
   143                                        GUARDADO_LETRA:
   144                                   
   145 0000009A 6683FA01                      cmp dx,0x1            ; Utilizo dx de flag para primero cargar la parte baja y luego la alta
   146 0000009E 7402                          jz ALTA
   147 000000A0 EB07                          jmp BAJA
   148                                  
   149                                  
   150                                        ALTA:
   151 000000A2 83F910                        cmp ecx, 0x10         ; Cuento las siguientes 8 teclas del numero de salida
   152 000000A5 7417                          jz MOSTRAR_NUMERO
   153 000000A7 EB09                          jmp GUARDADO_BUFFER
   154                                  
   155                                        BAJA:
   156 000000A9 83F908                        cmp ecx, 0x8          ; Cuento las primeras 8 teclas del numero de salida
   157 000000AC 0F8467FFFFFF                  jz PARTE_BAJA
   158                                  
   159                                        GUARDADO_BUFFER:
   160 000000B2 88B9[00000000]                mov byte[_BUFFER_NUMERO_PANTALLA + ecx],bh
   161 000000B8 41                            inc ecx
   162 000000B9 E964FFFFFF                    jmp BUFFER 
   163                                  
   164                                        MOSTRAR_NUMERO:
   165                                        
   166 000000BE B900000000                    mov ecx, 0x0
   167 000000C3 8B4508                        mov eax,[ebp + 8]     ; Guardo el valor de FILAS 
   168 000000C6 8B5D0C                        mov ebx,[ebp + 12]    ; Guardo el valor de COLUMNAS 
   169                                  
   170 000000C9 01D8                          add eax, ebx          ; Guardo el valor de FILAS + COLUMNAS para usarlo en el buffer
   171                                  
   172 000000CB C680[00000000]30              mov byte[__DIR_LINEAL_VIDEO + eax ], ASCII_TECLA_0
   173 000000D2 C680[01000000]07              mov byte[__DIR_LINEAL_VIDEO + eax + 0x01], 0x07  
   174 000000D9 C680[02000000]78              mov byte[__DIR_LINEAL_VIDEO + eax + 0x02], ASCII_TECLA_x
   175 000000E0 C680[03000000]07              mov byte[__DIR_LINEAL_VIDEO + eax + 0x03], 0x07
   176                                  
   177                                  
   178                                        NUMERO:
   179 000000E7 8A99[00000000]                mov bl , [_BUFFER_NUMERO_PANTALLA + ecx]                       ; Offset de columnas y filas arbitrario
   180 000000ED 889C48[04000000]              mov byte[__DIR_LINEAL_VIDEO + eax + 0x04 +ecx*2], bl           ; Guardo cada letra en el buffer de salida
   181 000000F4 C68448[05000000]07            mov byte[__DIR_LINEAL_VIDEO + eax + 0x04 + ecx *2+ 0x01], 0x07 ; Guardo el color de la letra y fondo despues de cada letra
   182 000000FC 83F910                        cmp ecx,0x10                                                   ; Cuento hasta 16 digitos y retorno
   183 000000FF 7403                          jz FIN
   184 00000101 41                            inc ecx
   185 00000102 EBE3                          jmp NUMERO
   186                                  
   187                                        FIN:
   188 00000104 C3                            ret
